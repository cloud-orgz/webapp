name: Build and Deploy GCP Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Start MySQL service
      run: sudo systemctl start mysql

    - name: Create MySQL Database
      env:
        GIT_MYSQL_USER: ${{ secrets.GIT_MYSQL_USER }}
        GIT_MYSQL_PASSWORD: ${{ secrets.GIT_MYSQL_PASSWORD }}
      run: |
        mysql -u "${GIT_MYSQL_USER}" -p"${GIT_MYSQL_PASSWORD}" -e "CREATE DATABASE cloud;"

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: 'maven'

    - name: Create GCP Credentials File
      env:
        GCP_CREDENTIALS: ${{ secrets.CREDS_JSON }}
      run: |
        echo "$GCP_CREDENTIALS" > src/main/resources/creds.json

    - name: Test with Maven
      run: mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/cloud
        SPRING_DATASOURCE_USERNAME: ${{ secrets.GIT_MYSQL_USER }}
        SPRING_DATASOURCE_PASSWORD: ${{ secrets.GIT_MYSQL_PASSWORD }}
        LOGFILE_PATH: target/logs
        GCP_PROJECTID: ${{ secrets.GCP_PROJECTID }}
        TOPIC_NAME: ${{ secrets.TOPIC_NAME }}
        CREDS_JSON: ${{ github.workspace }}/src/main/resources/creds.json
        
    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
      
    - name: Setup `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: 1.8.6

    - name: Build Custom GCP Image with Packer
      id: packer_build
      run: |
        cd packer-dir
        packer init .
        packer_output=$(packer build -var 'artifact_path=${{ github.workspace }}/target/assignment1-1.0.0.jar' -var 'project_id=${{ secrets.GCP_PROJECT_ID }}' -var 'zone=${{ secrets.GCP_ZONE }}' . ) 
        echo "$packer_output"
        if echo "$packer_output" | grep -q 'A disk image was created'; then
          IMAGE_ID=$(echo "$packer_output" | grep 'A disk image was created' | awk -F': ' '{print $NF}')
          echo "Image ID: $IMAGE_ID"
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
        else
          echo "Packer build failed or image ID was not found."
          exit 1
        fi
      shell: bash
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_ZONE: ${{ secrets.GCP_ZONE }}

    - name: Authenticate to Google Cloud with service account
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ secrets.CRED_JSON_VM }}

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ secrets.GCP_VM_PROJECT_ID }}


    - name: Get VPC Network Self-Link
      run: |
        VPC_NETWORK_SELF_LINK=$(gcloud compute networks describe ${{ secrets.VPC_NETWORK_NAME }} --format='value(selfLink)')
        echo "VPC_NETWORK_SELF_LINK=$VPC_NETWORK_SELF_LINK" >> $GITHUB_ENV

    - name: Get Subnetwork Self-Link
      run: |
        SUBNETWORK_SELF_LINK=$(gcloud compute networks subnets describe ${{ secrets.SUBNETWORK_NAME }} --region ${{ secrets.GCP_REGION }} --format='value(selfLink)')
        echo "SUBNETWORK_SELF_LINK=$SUBNETWORK_SELF_LINK" >> $GITHUB_ENV


    - name: Create New Instance Template with Latest Image
      id: create_template # Added an ID to this step to reference its outputs
      run: |
        TEMPLATE_NAME=webapp-vm-template-$(date +%Y%m%d%H%M%S)
        gcloud compute instance-templates create $TEMPLATE_NAME \
          --machine-type=e2-medium \
          --region=${{ secrets.GCP_REGION }} \
          --network=${{ env.VPC_NETWORK_SELF_LINK }} \
          --subnet=${{ env.SUBNETWORK_SELF_LINK }} \
          --no-address \
          --image=${{ steps.packer_build.outputs.image_id }} \
          --tags=webapp-vm-template,allow-app-traffic,deny-all-traffic,allow-ssh-traffic,load-balancer \
          --metadata=startup-script='#!/bin/bash\nset -e\nENV_PATH="/opt/webapp/.env"\nif [ ! -f "$ENV_PATH" ]; then\n  mkdir -p /opt/webapp\n  sudo gsutil cp gs://${{ secrets.BUCKET_NAME }}/creds.json /opt/webapp/creds.json\n  echo "DB_USERNAME=${{ secrets.DB_USER }}" >> $ENV_PATH\n  echo "DB_PASSWORD=${{ secrets.DB_PASS }}" >> $ENV_PATH\n  echo "DB_HOSTNAME=${{ secrets.DB_IP }}" >> $ENV_PATH\n  echo "DB_NAME=${{ secrets.DB_NAME }}" >> $ENV_PATH\n  echo "LOGFILE_PATH=/var/logs/webapp" >> $ENV_PATH\n  echo "GCP_PROJECTID=${{ secrets.GCP_VM_PROJECT_ID }}" >> $ENV_PATH\n  echo "TOPIC_NAME=${{ secrets.TOPIC_NAME_META }}" >> $ENV_PATH\n  echo "CREDS_JSON=/opt/webapp/creds.json" >> $ENV_PATH\n  sudo chown csye6225:csye6225 $ENV_PATH\n  sudo chown csye6225:csye6225 /opt/webapp/creds.json\n  echo "Startup script has executed."\nelse\n  echo ".env file already exists, skipping environment setup."\nfi' \
          --service-account=${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --disk="auto-delete=yes,boot=yes,device-name=webapp-vm-template,image=${{ steps.packer_build.outputs.image_id }},mode=rw,size=20,type=pd-balanced"
        echo "::set-output name=template_name::$TEMPLATE_NAME"
      env:
        GCP_REGION: ${{ secrets.GCP_REGION }}
        # Corrected: Environment variable references updated to use the correct syntax
        VPC_NETWORK_SELF_LINK: ${{ env.VPC_NETWORK_SELF_LINK }}
        WEBAPP_SUBNET_SELF_LINK: ${{ env.SUBNETWORK_SELF_LINK }}
        BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASS: ${{ secrets.DB_PASS }}
        DB_IP: ${{ secrets.DB_IP }}
        DB_NAME: ${{ secrets.DB_NAME }}
        PROJECT_ID: ${{ secrets.GCP_VM_PROJECT_ID }}
        TOPIC_NAME: ${{ secrets.TOPIC_NAME_META }}
        SERVICE_ACCOUNT_EMAIL: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}


    - name: Get Latest Instance Template ID
      id: get_template_id
      run: |
        TEMPLATE_ID=$(gcloud compute instance-templates list --filter="name='${{ steps.create_template.outputs.template_name }}'" --format="value(id)" --limit=1)
        echo "::set-output name=template_id::$TEMPLATE_ID"

    - name: Update Managed Instance Group to Use New Template
      run: |
        gcloud compute instance-groups managed set-instance-template ${{ secrets.MIG_NAME }} \
          --template=${{ steps.get_template_id.outputs.template_id }} \
          --region=${{ secrets.GCP_REGION }}
      env:
        MIG_NAME: ${{ secrets.MIG_NAME }}
        REGION: ${{ secrets.GCP_REGION }}


    - name: Get Regional Managed Instance Group Self-Link
      run: |
        MIG_SELF_LINK=$(gcloud compute instance-groups managed describe ${{ secrets.MIG_NAME }} --region ${{ secrets.GCP_REGION }} --format='value(selfLink)')
        echo "MIG_SELF_LINK=$MIG_SELF_LINK" >> $GITHUB_ENV

    - name: Wait for MIG Refresh to Complete
      run: |
        OPERATION_STATUS="RUNNING"
        while [ "$OPERATION_STATUS" == "RUNNING" ]; do
          OPERATION_STATUS=$(gcloud compute operations list --filter="targetLink=$MIG_LINK AND operationType=update AND status=RUNNING" --format="value(status)" --limit=1)
          if [ -z "$OPERATION_STATUS" ]; then
            OPERATION_STATUS="DONE"
          fi
          echo "Current operation status: $OPERATION_STATUS"
          sleep 30
        done
      env:
        MIG_LINK: ${{ env.MIG_SELF_LINK }}
