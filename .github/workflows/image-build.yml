name: Build and Deploy GCP Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Start MySQL service
      run: sudo systemctl start mysql

    - name: Create MySQL Database
      env:
        GIT_MYSQL_USER: ${{ secrets.GIT_MYSQL_USER }}
        GIT_MYSQL_PASSWORD: ${{ secrets.GIT_MYSQL_PASSWORD }}
      run: |
        mysql -u "${GIT_MYSQL_USER}" -p"${GIT_MYSQL_PASSWORD}" -e "CREATE DATABASE cloud;"

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: 'maven'

    - name: Create GCP Credentials File
      env:
        GCP_CREDENTIALS: ${{ secrets.CREDS_JSON }}
      run: |
        echo "$GCP_CREDENTIALS" > src/main/resources/creds.json

    - name: Test with Maven
      run: mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/cloud
        SPRING_DATASOURCE_USERNAME: ${{ secrets.GIT_MYSQL_USER }}
        SPRING_DATASOURCE_PASSWORD: ${{ secrets.GIT_MYSQL_PASSWORD }}
        LOGFILE_PATH: target/logs
        GCP_PROJECTID: ${{ secrets.GCP_PROJECTID }}
        TOPIC_NAME: ${{ secrets.TOPIC_NAME }}
        CREDS_JSON: ${{ github.workspace }}/src/main/resources/creds.json
        
    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
      
    - name: Setup `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: 1.8.6

    - name: Build Custom GCP Image with Packer
      id: packer_build
      run: |
        cd packer-dir
        packer init .
        IMAGE_ID=$(packer build -var 'artifact_path=${{ github.workspace }}/target/assignment1-1.0.0.jar' -var 'project_id=${{ secrets.GCP_PROJECT_ID }}' -var 'zone=${{ secrets.GCP_ZONE }}' | grep 'A disk image was created:' | awk '{print $NF}')
        echo "::set-output name=image_id::$IMAGE_ID"
        echo "Image ID: $IMAGE_ID"
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_ZONE: ${{ secrets.GCP_ZONE }}

    - name: Authenticate to Google Cloud with service account
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY_VM }}

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ secrets.GCP_VM_PROJECT_ID }}

    # Create New Instance Template with Latest Image
    - name: Create New Instance Template with Latest Image
      id: create_template
      run: |
        TEMPLATE_NAME="webapp-vm-template-$(date +%Y%m%d%H%M%S)"
        gcloud compute instance-templates create $TEMPLATE_NAME \
          --machine-type="e2-medium" \
          --region="${{ secrets.GCP_REGION }}" \
          --network="projects/${{ secrets.GCP_VM_PROJECT_ID }}/global/networks/${{ secrets.VPC_NETWORK_NAME }}" \
          --subnet="projects/${{ secrets.GCP_VM_PROJECT_ID }}/regions/${{ secrets.GCP_REGION }}/subnetworks/${{ secrets.SUBNETWORK_NAME }}" \
          --no-address \
          --image-project="${{ secrets.GCP_PROJECT_ID }}" \
          --image="${{ steps.packer_build.outputs.image_id }}" \
          --tags="webapp-vm-template,allow-app-traffic,deny-all-traffic,allow-ssh-traffic,load-balancer" \
          --metadata=startup-script='#!/bin/bash\nset -e\nENV_PATH="/opt/webapp/.env"\nif [ ! -f "$ENV_PATH" ]; then\n  mkdir -p /opt/webapp\n  sudo gsutil cp gs://${{ secrets.BUCKET_NAME }}/creds.json /opt/webapp/creds.json\n  echo "DB_USERNAME=${{ secrets.DB_USER }}" >> $ENV_PATH\n  echo "DB_PASSWORD=${{ secrets.DB_PASS }}" >> $ENV_PATH\n  echo "DB_HOSTNAME=${{ secrets.DB_IP }}" >> $ENV_PATH\n  echo "DB_NAME=${{ secrets.DB_NAME }}" >> $ENV_PATH\n  echo "LOGFILE_PATH=/var/logs/webapp" >> $ENV_PATH\n  echo "GCP_PROJECTID=${{ secrets.GCP_VM_PROJECT_ID }}" >> $ENV_PATH\n  echo "TOPIC_NAME=${{ secrets.TOPIC_NAME_META }}" >> $ENV_PATH\n  echo "CREDS_JSON=/opt/webapp/creds.json" >> $ENV_PATH\n  sudo chown csye6225:csye6225 $ENV_PATH\n  sudo chown csye6225:csye6225 /opt/webapp/creds.json\n  echo "Startup script has executed."\nelse\n  echo ".env file already exists, skipping environment setup."\nfi' \
          --service-account="${{ secrets.SERVICE_ACCOUNT_EMAIL }}" \
          --scopes="https://www.googleapis.com/auth/cloud-platform"
        echo "Template Name: $TEMPLATE_NAME"
        echo "TEMPLATE_NAME=$TEMPLATE_NAME" >> $GITHUB_ENV
        

    # Update Managed Instance Group to Use New Template
    - name: Update Managed Instance Group to Use New Template
      run: |
        gcloud compute instance-groups managed set-instance-template ${{ secrets.MIG_NAME }} \
          --template="${{ env.TEMPLATE_NAME }}" \
          --region="${{ secrets.GCP_REGION }}"

    # Start a basic rolling update
    - name: Start a basic rolling update
      run: |
        gcloud compute instance-groups managed rolling-action start-update ${{ secrets.MIG_NAME }} \
          --version template="${{ env.TEMPLATE_NAME }}" \
          --region="${{ secrets.GCP_REGION }}"
        
        
        # Monitor the update status using versionTarget.isReached
    - name: Monitor update status until version target is reached
      run: |
        $completed = $false
        while (-not $completed) {
          $updateStatus = gcloud compute instance-groups managed describe ${{ secrets.MIG_NAME }} --region="${{ secrets.GCP_REGION }}" --format="value(status.versionTarget.isReached)"
          if ($updateStatus -eq "true") {
            $completed = $true
            Write-Output "Update has successfully reached the version target."
          } else {
            Write-Output "Update is still in progress..."
            Start-Sleep -Seconds 30
          }
        }
      shell: pwsh

